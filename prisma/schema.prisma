generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Wedding {
  wedding_id   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wedding_date DateTime     @db.Date
  qr_code_path String?      @db.VarChar(500)
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime     @default(now()) @db.Timestamptz(6)
  deleted_at   DateTime?    @db.Timestamptz(6)
  created_by   String?      @db.Uuid
  updated_by   String?      @db.Uuid
  deleted_by   String?      @db.Uuid
  medias       Media[]
  users        User[]
  invitations  Invitation[] @relation("InvitationToWedding")

  @@index([wedding_date], map: "idx_weddings_wedding_date")
  @@index([deleted_at], map: "idx_weddings_deleted_at")
  @@map("weddings")
}

model User {
  user_id    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wedding_id String    @db.Uuid
  user_name  String    @db.VarChar(100)
  email      String    @unique @db.VarChar(255)
  password   String    @default("") @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid
  deleted_by String?   @db.Uuid
  wedding    Wedding   @relation(fields: [wedding_id], references: [wedding_id], onDelete: Restrict)

  @@index([wedding_id], map: "idx_users_wedding_id")
  @@index([email], map: "idx_users_email")
  @@index([deleted_at], map: "idx_users_deleted_at")
  @@map("users")
}

/// Media model for storing image and video information
model Media {
  media_id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wedding_id       String    @db.Uuid
  posted_user_name String    @db.VarChar(150)
  media_path       String    @db.VarChar(500)
  /// Media type: "image" or "video"
  media_type       String    @default("image") @db.VarChar(20)
  posted_at        DateTime  @default(now()) @db.Timestamptz(6)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at       DateTime? @db.Timestamptz(6)
  created_by       String?   @db.Uuid
  updated_by       String?   @db.Uuid
  deleted_by       String?   @db.Uuid
  wedding          Wedding   @relation(fields: [wedding_id], references: [wedding_id], onDelete: Restrict)

  @@index([wedding_id], map: "idx_medias_wedding_id")
  @@index([posted_user_name], map: "idx_medias_posted_user_name")
  @@index([posted_at], map: "idx_medias_posted_at")
  @@index([deleted_at], map: "idx_medias_deleted_at")
  @@map("medias")
}

/// Invitation model for managing user invitations
model Invitation {
  invitation_id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wedding_id    String    @db.Uuid
  invited_by    String    @db.Uuid
  email         String    @db.VarChar(255)
  token         String    @unique @db.VarChar(255)
  expires_at    DateTime  @db.Timestamptz(6)
  used_at       DateTime? @db.Timestamptz(6)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamptz(6)
  created_by    String?   @db.Uuid
  updated_by    String?   @db.Uuid
  deleted_by    String?   @db.Uuid
  wedding       Wedding   @relation("InvitationToWedding", fields: [wedding_id], references: [wedding_id], onDelete: Restrict)

  @@index([token], map: "idx_invitations_token")
  @@index([email], map: "idx_invitations_email")
  @@index([wedding_id], map: "idx_invitations_wedding_id")
  @@index([expires_at], map: "idx_invitations_expires_at")
  @@index([deleted_at], map: "idx_invitations_deleted_at")
  @@map("invitations")
}

/// UploadJob model for managing background upload tasks
model UploadJob {
  job_id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wedding_id       String    @db.Uuid
  user_id          String    @db.Uuid
  posted_user_name String    @db.VarChar(150)
  total_files      Int       @default(0)
  processed_files  Int       @default(0)
  failed_files     Int       @default(0)
  status           String    @default("pending") @db.VarChar(20) // pending, processing, completed, failed
  error_message    String?   @db.Text
  file_metadata    Json? // Store file names and sizes
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @default(now()) @db.Timestamptz(6)
  completed_at     DateTime? @db.Timestamptz(6)

  @@index([job_id], map: "idx_upload_jobs_job_id")
  @@index([wedding_id], map: "idx_upload_jobs_wedding_id")
  @@index([user_id], map: "idx_upload_jobs_user_id")
  @@index([status], map: "idx_upload_jobs_status")
  @@index([created_at], map: "idx_upload_jobs_created_at")
  @@map("upload_jobs")
}
